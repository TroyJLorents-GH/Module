using Zywave.Analytics.Utilization.Contracts;
using Zywave.Analytics.Utilization.Extensions;
using Zywave.Core.Accounts.Contracts;
using Zywave.Core.Census.Contracts;
using Zywave.Core.Plans.Contracts;
using Zywave.Core.Quotes.Contracts;
using Zywave.Integrations.Aetna.Contracts;
using RateType = Zywave.Core.Plans.Contracts.RateType;

namespace Zywave.CPQ.Quoting.Processes.QuotingModules;

public class AetnaLevelFundedQuotingModule : QuotingModuleBase, IQuotingModule
{
    public AetnaLevelFundedQuotingModule(IPlanManager planManager,
        IQuotedPlanManager quotedPlanManager,
        ICarrierManager carrierManager,
        IQuotingCache quotingCache,
        IUtilizationEventPublisher utilizationEventPublisher,
        IAetnaService aetnaService,
        IAccountService accountService,
        IQuotingDiagnostics quotingDiagnostics) : base(quotingCache, quotingDiagnostics, planManager)
    {
        QuotedPlanManager = quotedPlanManager;
        CarrierManager = carrierManager;
        UtilizationEventPublisher = utilizationEventPublisher;
        AetnaService = aetnaService;
        AccountService = accountService;
    }

    #region Managers

    private IQuotedPlanManager QuotedPlanManager { get; }
    private ICarrierManager CarrierManager { get; }
    private IAetnaService AetnaService { get; }
    public IAccountService AccountService { get; set; }
    private IUtilizationEventPublisher UtilizationEventPublisher { get; }

    #endregion

    #region Configuration

    public string ApiKey => nameof(QuotingModuleKey.AetnaLevelFunded);
    public bool IsActive => true;
    public HashSet<PlanType> PlanTypes => new() { PlanType.Medical };
    public HashSet<RateType> RateTypes => new() { RateType.LevelFunded };
    public bool IsDefault => false;
    public bool RequiresCorePlans => true;
    public bool RequiresBenefitItems => true;

    #endregion

    #region QuotingCacheEntries

    private AsyncLazy<ILookup<int?, CoverageGroupMember>> CoverageGroupMembersByGroupId => (AsyncLazy<ILookup<int?, CoverageGroupMember>>)QuotingCache.Cache[QuotingCacheKey.CoverageGroupMembersByGroupId];
    private AsyncLazy<ILookup<int, (Member, RelationshipType)>> DependentMemberLookup => (AsyncLazy<ILookup<int, (Member, RelationshipType)>>)QuotingCache.Cache[QuotingCacheKey.DependentMemberLookup];
    private AsyncLazy<CarrierApiEnvironment> CarrierApiEnvironment => (AsyncLazy<CarrierApiEnvironment>)QuotingCache.Cache[QuotingCacheKey.CarrierApiEnvironment];

    #endregion

    public const string AetnaNotAvailable = "NotAvailable - The service is currently unavailable.";

    public async IAsyncEnumerable<RatingResult> GetRatingResults(IEnumerable<Plan> plans, [EnumeratorCancellation] CancellationToken cancellationToken = default)
    {
        if (!plans.Any()) yield break;

        var quote = await Quote;
        var carrierPlanIdDictionary = await PlanManager.GetPlanDictionaryByPlanAttribute(Constants.CarrierPlanIdAttributeName, plans);

        var ineligibleReasons = await GetIneligibleReasons(cancellationToken);
        if (ineligibleReasons.Count > 0) throw new QuotingException(PlanTypeStatusEnum.NoEligiblePlans, $"Account not eligible: {ineligibleReasons[0]}. Ending job.");

        var quotableLevelFundedPlans = carrierPlanIdDictionary.Select(cpid => cpid.Key).ToHashSet();
        if (quotableLevelFundedPlans == null || !quotableLevelFundedPlans.Any()) throw new QuotingException(PlanTypeStatusEnum.NoEligiblePlans, $"No level funded plans were found.");

        //Remove any plans where there is no Carrier Plan Identifier
        plans = plans.Where(p => quotableLevelFundedPlans.Contains(p.Id));


        var carrierCompanyDictionary = await CarrierManager.GetCarrierCompanyDictionary(plans.Select(p => p.CarrierCompanyId).Distinct().ToList(), cancellationToken);

        foreach (var (carrierCompanyId, carrierCompany) in carrierCompanyDictionary)
            QuotingCache.CarrierCompanyDictionary.TryAdd(carrierCompanyId, carrierCompany);

        List<QuotedPlanInfo2> quotedPlans = new();
        if ((bool)(QuotingCache.Cache.GetValueOrDefault(QuotingCacheKey.ExcludeQuotedPlanDeprecatedValues) ?? false))
        {
            quotedPlans = await QuotedPlanManager.CreateQuotedPlansWithoutBenefitItems(plans, quote, cancellationToken).ToListAsync(cancellationToken);
        }
        else
        {
            var (benefitItems, benefitItemValues) = await QuotingCache.BenefitItemsByPlanType[PlanType.Medical];
            quotedPlans = await QuotedPlanManager.CreateQuotedPlans(plans, quote, quote.AgencyId, benefitItems, benefitItemValues, carrierCompanyDictionary, cancellationToken).ToListAsync(cancellationToken);
        }

        var levelFundedResponse = await GetRates(quotedPlans, carrierPlanIdDictionary, cancellationToken);

        await TrackUtilizationEvent(quotedPlans.Any(), quote.State, quote.AgencyId, quote.CreatedByProfileId, quote.CreatedByProfileTypeCode);

        foreach (var plan in quotedPlans)
        {
            var memberWarnings = levelFundedResponse.MemberWarningInfos != null && levelFundedResponse.MemberWarningInfos.ContainsKey(plan.PlanId) ?
                levelFundedResponse.MemberWarningInfos[plan.PlanId] : Enumerable.Empty<MemberWarningInfo2>();

            yield return await CreateRatingResult(plan, levelFundedResponse.PlanRateInfos[plan.PlanId], levelFundedResponse.MemberRateInfos[plan.PlanId], levelFundedResponse.CoverageGroupQuotedPlanInfos[plan.PlanId.ToString()],
                quote, memberWarnings, Enumerable.Empty<ExternalIdentifierInfo2>(), Enumerable.Empty<QuotedPlanPackageInfo2>());
        }
    }

    private async Task TrackUtilizationEvent(bool hasLevelFunded, string quotedState, int quoteAgencyId, string profileId, string profileTypeCode)
    {
        var levelFundedMetaData = new Dictionary<string, object>
        {
            {"HasLevelFunded", hasLevelFunded.ToString()},
            {"QuotedState", quotedState},
            {"AgencyId", quoteAgencyId.ToString()}
        };

        var levelFundedPlansAnalyticEvent = new Event
        {
            Timestamp = DateTime.Now,
            Name = Constants.EligibleLevelFundedPlansEventName,
            Application = Constants.UtilizationApplication,
            Origin = Constants.QuoteEventOrigin,
            Target = Constants.QuoteEventTarget,
            Category = null,
            Subcategory = null,
            ReferenceId = null,
            UserPrincipalId = null,
            UserProfileId = profileId,
            UserProfileTypeCode = profileTypeCode,
            UserProfileImpersonated = false,
            LegacyLogId = null,
            Tags = null,
            Metadata = levelFundedMetaData
        };

        await UtilizationEventPublisher.PublishAsync(levelFundedPlansAnalyticEvent);
    }

    private static AetnaEnvironment? GetAetnaEnvironment(CarrierApiEnvironment carrierApiEnvironment)
    {
        return Enum.TryParse(carrierApiEnvironment.ToString(), out AetnaEnvironment env) ? env : null;
    }

    private async Task<List<CoverageGroup>> RemoveIneligibleEmployeesFromCoverageGroup(AetnaCompositeRates levelFundedRate, IEnumerable<Member> quotableCensusMembers)
    {
        var waivedMemberIds = (await WaivedMemberIdsByPlanType)[PlanType.Medical];
        var dependentMemberLookup = await DependentMemberLookup;
        var coverageGroupsByPlanType = await CoverageGroupsByPlanType;
        var coverageGroupMembersByGroupId = await CoverageGroupMembersByGroupId;

        var quotableCoverageGroups = new List<CoverageGroup>();

        foreach (var coverageGroup in coverageGroupsByPlanType[PlanType.Medical])
        {
            if (coverageGroup.PlanTypeId != (int)PlanType.Medical) continue;

            var quotableCoverageGroup = new CoverageGroup { Id = coverageGroup.Id };

            var cgMemberIds = coverageGroupMembersByGroupId[coverageGroup.Id].Select(c => c.MemberId).ToHashSet();

            var members = quotableCensusMembers.Where(m => cgMemberIds.Contains(m.Id) && m.IsPolicyHolder);

            foreach (var member in members)
            {
                if (levelFundedRate.IneligibleSubscribers != null && levelFundedRate.IneligibleSubscribers.Exists(i => i.CorrelId == member.Id)) continue;

                //Get tier should handle if a family is all waived and only employee is enrolling
                var memberTier = member.GetTierType(dependentMemberLookup, waivedMemberIds);

                switch (memberTier)
                {
                    case TierType.Employee:
                        quotableCoverageGroup.EoCount++;
                        break;
                    case TierType.EmployeeChild:
                        quotableCoverageGroup.EcCount++;
                        break;
                    case TierType.EmployeeSpouse:
                        quotableCoverageGroup.EsCount++;
                        break;
                    case TierType.Family:
                        quotableCoverageGroup.EfCount++;
                        break;
                }
            }

            quotableCoverageGroups.Add(quotableCoverageGroup);
        }

        return quotableCoverageGroups;
    }

    private static decimal? CalculateAetnaLevelFundedPremiumsForCoverageGroup(CoverageGroup coverageGroup, AetnaCompositeRates levelFundedRate)
    {
        var eoPremium = levelFundedRate.Employee * coverageGroup.EoCount;
        var esPremium = levelFundedRate.EmployeeAndSpouse * coverageGroup.EsCount;
        var ecPremium = levelFundedRate.EmployeeAndChildren * coverageGroup.EcCount;
        var efPremium = levelFundedRate.EmployeeAndFamily * coverageGroup.EfCount;

        var premium = eoPremium + esPremium + ecPremium + efPremium;

        return premium <= 0 ? null : premium;
    }

    private async Task<LevelFundedResponse> MapAetnaResponse(AetnaResponse aetnaResponse, IEnumerable<QuotedPlanInfo2> quotedPlans, IDictionary<int, string> carrierPlanIdDictionary)
    {
        var quote = await Quote;
        var censusMembers = await CensusMembers;
        var waivedMemberIds = (await WaivedMemberIdsByPlanType)[PlanType.Medical];
        var dependentMemberLookup = await DependentMemberLookup;
        var coverageGroupsByPlanType = await CoverageGroupsByPlanType;
        var aetnaCompositeRates = aetnaResponse.AetnaCompositeRates.ToLookup(r => r.ProductId);

        var levelFundedResponse = new LevelFundedResponse
        (
            new Dictionary<string, List<CoverageGroupQuotedPlanInfo2>>(),
            new Dictionary<int, List<PlanRateInfo2>>(),
            new Dictionary<int, List<MemberRateInfo2>>(),
            new Dictionary<int, List<MemberWarningInfo2>>()
        );

        foreach (var quotedPlan in quotedPlans)
        {
            var levelFundedRate = aetnaCompositeRates[int.Parse(carrierPlanIdDictionary[quotedPlan.PlanId])].FirstOrDefault();

            if (levelFundedRate == null)
            {
                quotedPlan.Message = Constants.NoLevelFundedRatesMessage;
            }
            else if (!string.IsNullOrWhiteSpace(levelFundedRate.InfoString) && levelFundedRate.InfoString.Equals(AetnaNotAvailable))
            {
                quotedPlan.Message = levelFundedRate.ErrorString.Length > 499 ? levelFundedRate.ErrorString[..499] : levelFundedRate.ErrorString;

                levelFundedResponse.CoverageGroupQuotedPlanInfos.Add(quotedPlan.PlanId.ToString(), new List<CoverageGroupQuotedPlanInfo2>());

                foreach (var coverageGroup in coverageGroupsByPlanType[PlanType.Medical])
                {
                    var coverageGroupQuotedPlanInfo = new CoverageGroupQuotedPlanInfo2
                    {
                        CompositePremium = null,
                        CoverageGroupId = coverageGroup.Id,
                        HasQuotingError = true
                    };

                    levelFundedResponse.CoverageGroupQuotedPlanInfos[quotedPlan.PlanId.ToString()].Add(coverageGroupQuotedPlanInfo);
                }
            }
            else
            {
                if (levelFundedRate.HasErrors)
                {
                    quotedPlan.Message = levelFundedRate.ErrorString;
                }

                levelFundedResponse.PlanRateInfos.Add(quotedPlan.PlanId, new List<PlanRateInfo2>());
                // ---------- Employee and Rate Breakdowns ---------------------

                levelFundedResponse.PlanRateInfos[quotedPlan.PlanId].Add(new PlanRateInfo2
                {
                    Rate = levelFundedRate.Employee,
                    PlanRateAttributeTypes = new List<string> { Constants.PlanAttributeLevelFunded, Constants.PlanAttributeTier, Constants.PlanAttributeEmployee },
                    UpdatedDateTime = DateTimeOffset.Now
                });
                levelFundedResponse.PlanRateInfos[quotedPlan.PlanId].Add(new PlanRateInfo2
                {
                    Rate = levelFundedRate.EmployeeASO,
                    PlanRateAttributeTypes = new List<string> { Constants.PlanAttributeLevelFunded, Constants.PlanAttributeTier, Constants.PlanAttributeEmployee, Constants.PlanAttributeAetnaASO },
                    UpdatedDateTime = DateTimeOffset.Now
                });
                levelFundedResponse.PlanRateInfos[quotedPlan.PlanId].Add(new PlanRateInfo2
                {
                    Rate = levelFundedRate.EmployeeCFCL,
                    PlanRateAttributeTypes = new List<string> { Constants.PlanAttributeLevelFunded, Constants.PlanAttributeTier, Constants.PlanAttributeEmployee, Constants.PlanAttributeAetnaCFCL },
                    UpdatedDateTime = DateTimeOffset.Now
                });
                levelFundedResponse.PlanRateInfos[quotedPlan.PlanId].Add(new PlanRateInfo2
                {
                    Rate = levelFundedRate.EmployeeTRO,
                    PlanRateAttributeTypes = new List<string> { Constants.PlanAttributeLevelFunded, Constants.PlanAttributeTier, Constants.PlanAttributeEmployee, Constants.PlanAttributeAetnaTRO },
                    UpdatedDateTime = DateTimeOffset.Now
                });
                levelFundedResponse.PlanRateInfos[quotedPlan.PlanId].Add(new PlanRateInfo2
                {
                    Rate = levelFundedRate.EmployeeTSL,
                    PlanRateAttributeTypes = new List<string> { Constants.PlanAttributeLevelFunded, Constants.PlanAttributeTier, Constants.PlanAttributeEmployee, Constants.PlanAttributeAetnaTSL },
                    UpdatedDateTime = DateTimeOffset.Now
                });

                // ---------- EmployeeSpouse and Rate Breakdowns ---------------------

                levelFundedResponse.PlanRateInfos[quotedPlan.PlanId].Add(new PlanRateInfo2
                {
                    Rate = levelFundedRate.EmployeeAndSpouse,
                    PlanRateAttributeTypes = new List<string> { Constants.PlanAttributeLevelFunded, Constants.PlanAttributeTier, Constants.PlanAttributeEmployeeSpouse },
                    UpdatedDateTime = DateTimeOffset.Now
                });
                levelFundedResponse.PlanRateInfos[quotedPlan.PlanId].Add(new PlanRateInfo2
                {
                    Rate = levelFundedRate.EmployeeAndSpouseASO,
                    PlanRateAttributeTypes = new List<string> { Constants.PlanAttributeLevelFunded, Constants.PlanAttributeTier, Constants.PlanAttributeEmployeeSpouse, Constants.PlanAttributeAetnaASO },
                    UpdatedDateTime = DateTimeOffset.Now
                });
                levelFundedResponse.PlanRateInfos[quotedPlan.PlanId].Add(new PlanRateInfo2
                {
                    Rate = levelFundedRate.EmployeeAndSpouseCFCL,
                    PlanRateAttributeTypes = new List<string> { Constants.PlanAttributeLevelFunded, Constants.PlanAttributeTier, Constants.PlanAttributeEmployeeSpouse, Constants.PlanAttributeAetnaCFCL },
                    UpdatedDateTime = DateTimeOffset.Now
                });
                levelFundedResponse.PlanRateInfos[quotedPlan.PlanId].Add(new PlanRateInfo2
                {
                    Rate = levelFundedRate.EmployeeAndSpouseTRO,
                    PlanRateAttributeTypes = new List<string> { Constants.PlanAttributeLevelFunded, Constants.PlanAttributeTier, Constants.PlanAttributeEmployeeSpouse, Constants.PlanAttributeAetnaTRO },
                    UpdatedDateTime = DateTimeOffset.Now
                });
                levelFundedResponse.PlanRateInfos[quotedPlan.PlanId].Add(new PlanRateInfo2
                {
                    Rate = levelFundedRate.EmployeeAndSpouseTSL,
                    PlanRateAttributeTypes = new List<string> { Constants.PlanAttributeLevelFunded, Constants.PlanAttributeTier, Constants.PlanAttributeEmployeeSpouse, Constants.PlanAttributeAetnaTSL },
                    UpdatedDateTime = DateTimeOffset.Now
                });

                // ---------- EmployeeChild and Rate Breakdowns ---------------------

                levelFundedResponse.PlanRateInfos[quotedPlan.PlanId].Add(new PlanRateInfo2
                {
                    Rate = levelFundedRate.EmployeeAndChildren,
                    PlanRateAttributeTypes = new List<string> { Constants.PlanAttributeLevelFunded, Constants.PlanAttributeTier, Constants.PlanAttributeEmployeeChild },
                    UpdatedDateTime = DateTimeOffset.Now
                });
                levelFundedResponse.PlanRateInfos[quotedPlan.PlanId].Add(new PlanRateInfo2
                {
                    Rate = levelFundedRate.EmployeeAndChildrenASO,
                    PlanRateAttributeTypes = new List<string> { Constants.PlanAttributeLevelFunded, Constants.PlanAttributeTier, Constants.PlanAttributeEmployeeChild, Constants.PlanAttributeAetnaASO },
                    UpdatedDateTime = DateTimeOffset.Now
                });
                levelFundedResponse.PlanRateInfos[quotedPlan.PlanId].Add(new PlanRateInfo2
                {
                    Rate = levelFundedRate.EmployeeAndChildrenCFCL,
                    PlanRateAttributeTypes = new List<string> { Constants.PlanAttributeLevelFunded, Constants.PlanAttributeTier, Constants.PlanAttributeEmployeeChild, Constants.PlanAttributeAetnaCFCL },
                    UpdatedDateTime = DateTimeOffset.Now
                });
                levelFundedResponse.PlanRateInfos[quotedPlan.PlanId].Add(new PlanRateInfo2
                {
                    Rate = levelFundedRate.EmployeeAndChildrenTRO,
                    PlanRateAttributeTypes = new List<string> { Constants.PlanAttributeLevelFunded, Constants.PlanAttributeTier, Constants.PlanAttributeEmployeeChild, Constants.PlanAttributeAetnaTRO },
                    UpdatedDateTime = DateTimeOffset.Now
                });
                levelFundedResponse.PlanRateInfos[quotedPlan.PlanId].Add(new PlanRateInfo2
                {
                    Rate = levelFundedRate.EmployeeAndChildrenTSL,
                    PlanRateAttributeTypes = new List<string> { Constants.PlanAttributeLevelFunded, Constants.PlanAttributeTier, Constants.PlanAttributeEmployeeChild, Constants.PlanAttributeAetnaTSL },
                    UpdatedDateTime = DateTimeOffset.Now
                });

                // ---------- EmployeeFamily and Rate Breakdowns ---------------------

                levelFundedResponse.PlanRateInfos[quotedPlan.PlanId].Add(new PlanRateInfo2
                {
                    Rate = levelFundedRate.EmployeeAndFamily,
                    PlanRateAttributeTypes = new List<string> { Constants.PlanAttributeLevelFunded, Constants.PlanAttributeTier, Constants.PlanAttributeEmployeeFamily },
                    UpdatedDateTime = DateTimeOffset.Now
                });
                levelFundedResponse.PlanRateInfos[quotedPlan.PlanId].Add(new PlanRateInfo2
                {
                    Rate = levelFundedRate.EmployeeAndFamilyASO,
                    PlanRateAttributeTypes = new List<string> { Constants.PlanAttributeLevelFunded, Constants.PlanAttributeTier, Constants.PlanAttributeEmployeeFamily, Constants.PlanAttributeAetnaASO },
                    UpdatedDateTime = DateTimeOffset.Now
                });
                levelFundedResponse.PlanRateInfos[quotedPlan.PlanId].Add(new PlanRateInfo2
                {
                    Rate = levelFundedRate.EmployeeAndFamilyCFCL,
                    PlanRateAttributeTypes = new List<string> { Constants.PlanAttributeLevelFunded, Constants.PlanAttributeTier, Constants.PlanAttributeEmployeeFamily, Constants.PlanAttributeAetnaCFCL },
                    UpdatedDateTime = DateTimeOffset.Now
                });
                levelFundedResponse.PlanRateInfos[quotedPlan.PlanId].Add(new PlanRateInfo2
                {
                    Rate = levelFundedRate.EmployeeAndFamilyTRO,
                    PlanRateAttributeTypes = new List<string> { Constants.PlanAttributeLevelFunded, Constants.PlanAttributeTier, Constants.PlanAttributeEmployeeFamily, Constants.PlanAttributeAetnaTRO },
                    UpdatedDateTime = DateTimeOffset.Now
                });
                levelFundedResponse.PlanRateInfos[quotedPlan.PlanId].Add(new PlanRateInfo2
                {
                    Rate = levelFundedRate.EmployeeAndFamilyTSL,
                    PlanRateAttributeTypes = new List<string> { Constants.PlanAttributeLevelFunded, Constants.PlanAttributeTier, Constants.PlanAttributeEmployeeFamily, Constants.PlanAttributeAetnaTSL },
                    UpdatedDateTime = DateTimeOffset.Now
                });

                var quotableCensusMembers = censusMembers.RemoveExtraDependents(dependentMemberLookup, null, quote.EffectiveDate);

                levelFundedResponse.MemberRateInfos.Add(quotedPlan.PlanId, new List<MemberRateInfo2>());

                var memberWarnings = new List<MemberWarningInfo2>();

                foreach (var censusMember in quotableCensusMembers)
                {
                    if (!censusMember.IsPolicyHolder) continue;

                    if (levelFundedRate.IneligibleSubscribers != null && levelFundedRate.IneligibleSubscribers.Exists(i => i.CorrelId == censusMember.Id))
                    {
                        memberWarnings.Add(new MemberWarningInfo2
                        {
                            MemberId = censusMember.Id,
                            WarningType = WarningType2.InEligible
                        });

                        continue;
                    }

                    var tier = censusMember.GetTierType(dependentMemberLookup, waivedMemberIds);

                    decimal memberRate = tier switch
                    {
                        TierType.Employee => levelFundedRate.Employee,
                        TierType.EmployeeChild => levelFundedRate.EmployeeAndChildren,
                        TierType.EmployeeSpouse => levelFundedRate.EmployeeAndSpouse,
                        TierType.Family => levelFundedRate.EmployeeAndFamily,
                        _ => 0
                    };

                    var memberRateInfo = new MemberRateInfo2
                    {
                        MemberId = censusMember.Id,
                        Rate = memberRate
                    };

                    levelFundedResponse.MemberRateInfos[quotedPlan.PlanId].Add(memberRateInfo);
                }

                if (memberWarnings.Any()) levelFundedResponse.MemberWarningInfos.Add(quotedPlan.PlanId, memberWarnings);
                levelFundedResponse.CoverageGroupQuotedPlanInfos.Add(quotedPlan.PlanId.ToString(), new List<CoverageGroupQuotedPlanInfo2>());

                var quotableCoverageGroups = new List<CoverageGroup>();

                if (levelFundedRate.IneligibleSubscribers is { Count: > 0 })
                {
                    quotableCoverageGroups = await RemoveIneligibleEmployeesFromCoverageGroup(levelFundedRate, quotableCensusMembers);
                }
                else
                {
                    quotableCoverageGroups.AddRange(coverageGroupsByPlanType[PlanType.Medical].Where(coverageGroup => coverageGroup.PlanTypeId == (int)PlanType.Medical));
                }

                foreach (var coverageGroup in quotableCoverageGroups)
                {
                    var compositePremium = CalculateAetnaLevelFundedPremiumsForCoverageGroup(coverageGroup, levelFundedRate);

                    var coverageGroupQuotedPlanInfo = new CoverageGroupQuotedPlanInfo2
                    {
                        CompositePremium = compositePremium,
                        CoverageGroupId = coverageGroup.Id,
                        HasQuotingError = !compositePremium.HasValue
                    };

                    levelFundedResponse.CoverageGroupQuotedPlanInfos[quotedPlan.PlanId.ToString()].Add(coverageGroupQuotedPlanInfo);

                }
            }
        }

        return levelFundedResponse;
    }

    private async Task<AetnaResponse> GetAetnaRates(IReadOnlyList<QuotedPlanInfo2> quotedPlans, IDictionary<int, string> carrierPlanIdDictionary, CancellationToken cancellationToken = default)
    {
        var quote = await Quote;
        var censusMembers = await CensusMembers;
        var waivedMemberIds = (await WaivedMemberIdsByPlanType)[PlanType.Medical].ToHashSet();
        var dependentMemberLookup = await DependentMemberLookup;
        var carrierApiEnvironment = await CarrierApiEnvironment;

        var subscribers = new List<RequestSubscriber>();
        var eligibleSubscribers = 0;

        foreach (var member in censusMembers)
        {
            if (!member.IsPolicyHolder || member.BirthDate == null) continue;

            var subscriber = new RequestSubscriber
            {
                FirstName = member.FirstName,
                LastName = member.LastName,
                DateOfBirth = member.BirthDate,
                TobaccoStatus = "No", //member.IsTobaccoUser.Value ? "Yes" : "No",
                //TODO -- Assuming we are just enrolling everyone on the census for now?
                MedicalCoverageType = waivedMemberIds.Contains(member.Id) ? "Waive" : "Enroll",
                HomeZip = member.PostalCode[..5],
                WorkZip = quote.PostalCode[..5],
                CorrelId = member.Id,
                Gender = member.Gender.ToString(),
                Dependents = new RequestDependents { Dependent = new List<RequestDependent>() }
            };

            var dependents = dependentMemberLookup[member.Id];

            foreach (var (dependentMember, relationshipType) in dependents)
            {
                cancellationToken.ThrowIfCancellationRequested();

                subscriber.Dependents.Dependent.Add(new RequestDependent()
                {
                    FirstName = dependentMember.FirstName,
                    LastName = dependentMember.LastName,
                    CorrelId = dependentMember.Id,
                    DateOfBirth = dependentMember.BirthDate,
                    TobaccoStatus = "No", //dependentMember.IsTobaccoUser.Value ? "Yes" : "No",
                    MedicalCoverageType = waivedMemberIds.Contains(dependentMember.Id) ? "Waive" : "Enroll",
                    Gender = dependentMember.Gender.ToString(),
                    Relation = relationshipType.Equals(RelationshipType.Spouse) ? "Spouse" : "Child"
                });
            }

            subscribers.Add(subscriber);
            eligibleSubscribers++;
        }

        var productRequests = quotedPlans.Select(compositePlan => new CompositeRatesProductRequest
        {
            ProductId = int.Parse(carrierPlanIdDictionary[compositePlan.PlanId]),
            ProductType = Constants.LevelFundedProductType
        }).ToList();

        var account = await AccountService.GetAccountAsync(quote.AccountId, quote.AgencyId, cancellationToken);

        var compositeRatesRequest = new CompositeRatesRequest
        {
            Subscribers = subscribers,
            ClientDetails = new RequestClientDetails
            {
                ClientId = quote.AccountId,
                ClientName = account.Name,
                EffectiveDate = quote.EffectiveDate,
                EmployerZip = quote.PostalCode[..5],
                EmployerState = quote.State,
                SicCode = quote.Sic,
                UserId = quote.AccountId
            },
            //TODO Find where this gets passed in as
            PlanBenefitType = 1,
            EligibleSubscribers = eligibleSubscribers,
            ProductRequests = productRequests,
            Pagination = new RequestPagination { PerPage = Constants.AetnaRequestPageSize }
        };

        var aetnaResponse = new AetnaResponse { AetnaCompositeRates = new List<AetnaCompositeRates>(), Disclaimers = new List<string>() };
        var page = 1;
        var disclaimers = new HashSet<string>();
        AetnaResponse response;

        do
        {
            cancellationToken.ThrowIfCancellationRequested();
            var pagedTpids = new List<string>();
            var startIndex = (page - 1) * Constants.AetnaRequestPageSize;
            var endIndex = Math.Min(startIndex + Constants.AetnaRequestPageSize, quotedPlans.Count);

            for (var i = startIndex; i < endIndex; i++)
            {
                pagedTpids.Add(carrierPlanIdDictionary[quotedPlans[i].PlanId]);
            }

            compositeRatesRequest.PagedProducts = pagedTpids;
            compositeRatesRequest.ProductRequests = productRequests;

            compositeRatesRequest.Pagination.Page = page;

            AetnaEnvironment? aetnaEnvironment = null;
            if (quote.IsTestQuote)
            {
                aetnaEnvironment = GetAetnaEnvironment(carrierApiEnvironment);
            }

            response = await AetnaService.GetCompositeRatesForPlanAsync(compositeRatesRequest, aetnaEnvironment, cancellationToken);
            aetnaResponse.AetnaCompositeRates.AddRange(response.AetnaCompositeRates);
            disclaimers.AddRange(response.Disclaimers);

            page++;

        } while (response.HasMoreResults);

        aetnaResponse.Disclaimers = disclaimers.ToList();
        return aetnaResponse;
    }

    private async Task<LevelFundedResponse> GetRates(List<QuotedPlanInfo2> quotedPlans, IDictionary<int, string> carrierPlanIdDictionary, CancellationToken cancellationToken = default)
    {
        var aetnaResponse = await GetAetnaRates(quotedPlans, carrierPlanIdDictionary, cancellationToken);
        return await MapAetnaResponse(aetnaResponse, quotedPlans, carrierPlanIdDictionary);
    }

    private async Task<List<string>> GetIneligibleReasons(CancellationToken cancellationToken)
    {
        var quote = await Quote;
        var coverageGroupMembers = (await CoverageGroupMembersByPlanType)[PlanType.Medical];
        var censusMembers = await CensusMembers;
        var dependentMemberLookup = await DependentMemberLookup;
        var waivedMemberIds = (await WaivedMemberIdsByPlanType)[PlanType.Medical].ToHashSet();

        var coverageGroupMemberIds = coverageGroupMembers.Select(m => m.MemberId).ToHashSet();

        var requestCensusEligibilityList = new List<RequestCensusEligibility>();

        foreach (var member in censusMembers.Where(m => m.IsPolicyHolder))
        {
            string coverageType;
            var requestCensusEligibility = new RequestCensusEligibility
            {
                EmployeeZipcode = member.PostalCode,
                SubscriberType = "Subscriber"
            };

            if (!coverageGroupMemberIds.Contains(member.Id))
            {
                requestCensusEligibility.CoverageType = "Waived";
                coverageType = "Waived";
            }
            else
            {
                var tier = member.GetTierType(dependentMemberLookup, waivedMemberIds);

                coverageType = tier switch
                {
                    TierType.Employee => "Employee",
                    TierType.EmployeeChild => "Employee+Child",
                    TierType.EmployeeSpouse => "Employee+Spouse",
                    TierType.Family => "Employee+Family",
                    _ => throw new InvalidOperationException($"{nameof(TierType)} out of range."),
                };
                requestCensusEligibility.CoverageType = coverageType;
            }

            requestCensusEligibilityList.Add(requestCensusEligibility);

            var dependents = dependentMemberLookup[member.Id];

            foreach (var (dependentMember, relationshipType) in dependents)
            {
                var dependentRCE = new RequestCensusEligibility
                {
                    EmployeeZipcode = dependentMember.PostalCode,
                    CoverageType = coverageType,
                    SubscriberType = relationshipType == RelationshipType.Spouse
                        ? "Spouse"
                        : "Dependent"
                };

                requestCensusEligibilityList.Add(dependentRCE);
            }
        }

        var request = new LevelFundedIneligibleReasonsRequest
        {
            ClientState = quote.State,
            ClientZipCode = quote.PostalCode[..5],
            EffectiveDate = quote.EffectiveDate,
            SicCode = quote.Sic,
            RequestCensusEligibility = requestCensusEligibilityList,
            County = quote.County
        };

        var ineligibleReasons = await AetnaService.GetLevelFundedIneligibleReasonsAsync(request, cancellationToken);
        return ineligibleReasons;
    }
}
